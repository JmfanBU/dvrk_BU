// Generated by gencpp from file cisst_msgs/mtsIntervalStatistics.msg
// DO NOT EDIT!


#ifndef CISST_MSGS_MESSAGE_MTSINTERVALSTATISTICS_H
#define CISST_MSGS_MESSAGE_MTSINTERVALSTATISTICS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace cisst_msgs
{
template <class ContainerAllocator>
struct mtsIntervalStatistics_
{
  typedef mtsIntervalStatistics_<ContainerAllocator> Type;

  mtsIntervalStatistics_()
    : header()
    , AvgPeriod(0.0)
    , StdDevPeriod(0.0)
    , MinPeriod(0.0)
    , MaxPeriod(0.0)
    , MinComputeTime(0.0)
    , MaxComputeTime(0.0)  {
    }
  mtsIntervalStatistics_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , AvgPeriod(0.0)
    , StdDevPeriod(0.0)
    , MinPeriod(0.0)
    , MaxPeriod(0.0)
    , MinComputeTime(0.0)
    , MaxComputeTime(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _AvgPeriod_type;
  _AvgPeriod_type AvgPeriod;

   typedef double _StdDevPeriod_type;
  _StdDevPeriod_type StdDevPeriod;

   typedef double _MinPeriod_type;
  _MinPeriod_type MinPeriod;

   typedef double _MaxPeriod_type;
  _MaxPeriod_type MaxPeriod;

   typedef double _MinComputeTime_type;
  _MinComputeTime_type MinComputeTime;

   typedef double _MaxComputeTime_type;
  _MaxComputeTime_type MaxComputeTime;




  typedef boost::shared_ptr< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> const> ConstPtr;

}; // struct mtsIntervalStatistics_

typedef ::cisst_msgs::mtsIntervalStatistics_<std::allocator<void> > mtsIntervalStatistics;

typedef boost::shared_ptr< ::cisst_msgs::mtsIntervalStatistics > mtsIntervalStatisticsPtr;
typedef boost::shared_ptr< ::cisst_msgs::mtsIntervalStatistics const> mtsIntervalStatisticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cisst_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'cisst_msgs': ['/home/jiameng/catkin_dvrk/src/cisst-saw/cisst-ros/cisst_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c68719e97d021e66b1d93de9fe44e44d";
  }

  static const char* value(const ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc68719e97d021e66ULL;
  static const uint64_t static_value2 = 0xb1d93de9fe44e44dULL;
};

template<class ContainerAllocator>
struct DataType< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cisst_msgs/mtsIntervalStatistics";
  }

  static const char* value(const ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
# average period \n\
float64 AvgPeriod\n\
# deviation on periodicity\n\
float64 StdDevPeriod\n\
# min and max time between\n\
float64 MinPeriod\n\
float64 MaxPeriod\n\
float64 MinComputeTime\n\
float64 MaxComputeTime\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.AvgPeriod);
      stream.next(m.StdDevPeriod);
      stream.next(m.MinPeriod);
      stream.next(m.MaxPeriod);
      stream.next(m.MinComputeTime);
      stream.next(m.MaxComputeTime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mtsIntervalStatistics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cisst_msgs::mtsIntervalStatistics_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "AvgPeriod: ";
    Printer<double>::stream(s, indent + "  ", v.AvgPeriod);
    s << indent << "StdDevPeriod: ";
    Printer<double>::stream(s, indent + "  ", v.StdDevPeriod);
    s << indent << "MinPeriod: ";
    Printer<double>::stream(s, indent + "  ", v.MinPeriod);
    s << indent << "MaxPeriod: ";
    Printer<double>::stream(s, indent + "  ", v.MaxPeriod);
    s << indent << "MinComputeTime: ";
    Printer<double>::stream(s, indent + "  ", v.MinComputeTime);
    s << indent << "MaxComputeTime: ";
    Printer<double>::stream(s, indent + "  ", v.MaxComputeTime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CISST_MSGS_MESSAGE_MTSINTERVALSTATISTICS_H
